#ifndef BMCE_CORE_KEYBOARD_H
#define BMCE_CORE_KEYBOARD_H


#include "core/signal.h"
#include "object.h"


namespace bmce
{


unsigned int sdl_keycode_to_vk(unsigned int key_code);


struct Keyboard : public Object
{
    using KeyUpSignal = Signal<unsigned int>;
    using KeyDownSignal = Signal<unsigned int>;
    using CursorMovedSignal = Signal<int, int>;

    KeyUpSignal key_down;
    KeyDownSignal key_up;
    CursorMovedSignal cursor_moved;

    enum KeyCode
    {
        VK_UNKNOWN = 0,

        // ASCII
        VK_RETURN = '\r',
        VK_ESCAPE = '\033',
        VK_BACKSPACE = '\b',
        VK_TAB = '\t',
        VK_SPACE = ' ',
        VK_EXCLAIM = '!',
        VK_QUOTEDBL = '"',
        VK_HASH = '#',
        VK_PERCENT = '%',
        VK_DOLLAR = '$',
        VK_AMPERSAND = '&',
        VK_QUOTE = '\'',
        VK_LEFTPAREN = '(',
        VK_RIGHTPAREN = ')',
        VK_ASTERISK = '*',
        VK_PLUS = '+',
        VK_COMMA = ',',
        VK_MINUS = '-',
        VK_PERIOD = '.',
        VK_SLASH = '/',
        VK_0 = '0',
        VK_1 = '1',
        VK_2 = '2',
        VK_3 = '3',
        VK_4 = '4',
        VK_5 = '5',
        VK_6 = '6',
        VK_7 = '7',
        VK_8 = '8',
        VK_9 = '9',
        VK_COLON = ':',
        VK_SEMICOLON = ';',
        VK_LESS = '<',
        VK_EQUALS = '=',
        VK_GREATER = '>',
        VK_QUESTION = '?',
        VK_AT = '@',
        VK_LEFTBRACKET = '[',
        VK_BACKSLASH = '\\',
        VK_RIGHTBRACKET = ']',
        VK_CARET = '^',
        VK_UNDERSCORE = '_',
        VK_BACKQUOTE = '`',
        VK_A = 'a',
        VK_B = 'b',
        VK_C = 'c',
        VK_D = 'd',
        VK_E = 'e',
        VK_F = 'f',
        VK_G = 'g',
        VK_H = 'h',
        VK_I = 'i',
        VK_J = 'j',
        VK_K = 'k',
        VK_L = 'l',
        VK_M = 'm',
        VK_N = 'n',
        VK_O = 'o',
        VK_P = 'p',
        VK_Q = 'q',
        VK_R = 'r',
        VK_S = 's',
        VK_T = 't',
        VK_U = 'u',
        VK_V = 'v',
        VK_W = 'w',
        VK_X = 'x',
        VK_Y = 'y',
        VK_Z = 'z',

        // SPECIAL
        VK_CAPSLOCK = 0b10000000,
        VK_F1,
        VK_F2,
        VK_F3,
        VK_F4,
        VK_F5,
        VK_F6,
        VK_F7,
        VK_F8,
        VK_F9,
        VK_F10,
        VK_F11,
        VK_F12,

        VK_PRINTSCREEN,
        VK_SCROLLLOCK,
        VK_PAUSE,
        VK_INSERT,
        VK_HOME,
        VK_PAGEUP,
        VK_DELETE,
        VK_END,
        VK_PAGEDOWN,
        VK_RIGHT,
        VK_LEFT,
        VK_DOWN,
        VK_UP,

        VK_NUMLOCKCLEAR,
        VK_KP_DIVIDE,
        VK_KP_MULTIPLY,
        VK_KP_MINUS,
        VK_KP_PLUS,
        VK_KP_ENTER,
        VK_KP_1,
        VK_KP_2,
        VK_KP_3,
        VK_KP_4,
        VK_KP_5,
        VK_KP_6,
        VK_KP_7,
        VK_KP_8,
        VK_KP_9,
        VK_KP_0,
        VK_KP_PERIOD,

        VK_APPLICATION,
        VK_POWER,
        VK_KP_EQUALS,
        VK_F13,
        VK_F14,
        VK_F15,
        VK_F16,
        VK_F17,
        VK_F18,
        VK_F19,
        VK_F20,
        VK_F21,
        VK_F22,
        VK_F23,
        VK_F24,
        VK_EXECUTE,
        VK_HELP,
        VK_MENU,
        VK_SELECT,
        VK_STOP,
        VK_AGAIN,
        VK_UNDO,
        VK_CUT,
        VK_COPY,
        VK_PASTE,
        VK_FIND,
        VK_MUTE,
        VK_VOLUMEUP,
        VK_VOLUMEDOWN,
        VK_KP_COMMA,
        VK_KP_EQUALSAS400,

        VK_ALTERASE,
        VK_SYSREQ,
        VK_CANCEL,
        VK_CLEAR,
        VK_PRIOR,
        VK_RETURN2,
        VK_SEPARATOR,
        VK_OUT,
        VK_OPER,
        VK_CLEARAGAIN,
        VK_CRSEL,
        VK_EXSEL,

        VK_KP_00,
        VK_KP_000,
        VK_THOUSANDSSEPARATOR,
        VK_DECIMALSEPARATOR,
        VK_CURRENCYUNIT,
        VK_CURRENCYSUBUNIT,
        VK_KP_LEFTPAREN,
        VK_KP_RIGHTPAREN,
        VK_KP_LEFTBRACE,
        VK_KP_RIGHTBRACE,
        VK_KP_TAB,
        VK_KP_BACKSPACE,
        VK_KP_A,
        VK_KP_B,
        VK_KP_C,
        VK_KP_D,
        VK_KP_E,
        VK_KP_F,
        VK_KP_XOR,
        VK_KP_POWER,
        VK_KP_PERCENT,
        VK_KP_LESS,
        VK_KP_GREATER,
        VK_KP_AMPERSAND,
        VK_KP_DBLAMPERSAND,
        VK_KP_VERTICALBAR,
        VK_KP_DBLVERTICALBAR,
        VK_KP_COLON,
        VK_KP_HASH,
        VK_KP_SPACE,
        VK_KP_AT,
        VK_KP_EXCLAM,
        VK_KP_MEMSTORE,
        VK_KP_MEMRECALL,
        VK_KP_MEMCLEAR,
        VK_KP_MEMADD,
        VK_KP_MEMSUBTRACT,
        VK_KP_MEMMULTIPLY,
        VK_KP_MEMDIVIDE,
        VK_KP_PLUSMINUS,
        VK_KP_CLEAR,
        VK_KP_CLEARENTRY,
        VK_KP_BINARY,
        VK_KP_OCTAL,
        VK_KP_DECIMAL,
        VK_KP_HEXADECIMAL,

        VK_LCTRL,
        VK_LSHIFT,
        VK_LALT,
        VK_LGUI,
        VK_RCTRL,
        VK_RSHIFT,
        VK_RALT,
        VK_RGUI,

        VK_MODE,

        VK_AUDIONEXT,
        VK_AUDIOPREV,
        VK_AUDIOSTOP,
        VK_AUDIOPLAY,
        VK_AUDIOMUTE,
        VK_MEDIASELECT,
        VK_WWW,
        VK_MAIL,
        VK_CALCULATOR,
        VK_COMPUTER,
        VK_AC_SEARCH,
        VK_AC_HOME,
        VK_AC_BACK,
        VK_AC_FORWARD,
        VK_AC_STOP,
        VK_AC_REFRESH,
        VK_AC_BOOKMARKS,

        VK_BRIGHTNESSDOWN,
        VK_BRIGHTNESSUP,
        VK_DISPLAYSWITCH,
        VK_KBDILLUMTOGGLE,
        VK_KBDILLUMDOWN,
        VK_KBDILLUMUP,
        VK_EJECT,
        VK_SLEEP,
        VK_APP1,
        VK_APP2,

        VK_AUDIOREWIND,
        VK_AUDIOFASTFORWARD
    };
};


} // namespace bmce


#endif
